# -*- coding: utf-8 -*-
"""Capstone.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V-GV6CBvMsCELT_hFWwE6lT7o7VgCQqf
"""

!pip install kaggle

!ls

!mkdir .kaggle

import json
token = {"username":"barbus1","key":"XXXXXXX"}
with open('/content/.kaggle/kaggle.json', 'w') as file:
    json.dump(token, file)

!kaggle config set -n path -v{/content}

!chmod 600 /content/.kaggle/kaggle.json

!mkdir ~/.kaggle
!cp /content/.kaggle/kaggle.json ~/.kaggle/kaggle.json

!kaggle datasets download -d sohier/crime-in-baltimore -p /content

!unzip \*.zip

pip install geopandas

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib
import matplotlib.pyplot as plt
import sys
import sklearn as svm
import geopandas as gpd
import shapely.geometry 
import fiona
import pyproj 
import six
from shapely.geometry import Point, Polygon

df = pd.read_csv('BPD_Part_1_Victim_Based_Crime_Data.csv')

df

df.describe()

df.info()

df.dropna(how = 'all')

df['Weapon'].unique()

df['CrimeCode'].unique()

"""What is Crime code?"""

df['Description'].unique()

"""Description vs Crime Code?"""

df1 = df.iloc[:, 2:5]

df1.drop('Location', axis =1, inplace = True)

df2 = df1.groupby(['Description']).agg(['unique'])

df2

pd.set_option('display.max_colwidth', -1)

df2

df.drop(['CrimeCode'], axis = 1, inplace = True)

df.rename(columns = {'Inside/Outside': 'In_Out'}, inplace = True)

df

df['In_Out'].unique()

df['In_Out'].replace('Inside','I', regex = True, inplace = True)

df['In_Out'].replace('Outside','O', regex = True, inplace = True)

df['In_Out'].unique()

df["DateTime"] = df["CrimeDate"] +" "+ df["CrimeTime"]

df['DateTime']=pd.to_datetime(df['DateTime'], infer_datetime_format=True, errors='coerce')

df.info()

df

df['Total Incidents'].unique()

df.drop('Total Incidents', axis = 1, inplace = True)

df.drop(['CrimeDate', 'CrimeTime'], axis = 1, inplace = True)

df

df['Weapon'].fillna('None or Unknown', inplace = True)

df['Weapon'].unique()

df['District'].unique()

df.loc[df['Location 1'].isnull()]

"""Two thousand rows where location is null, this is less than 1 percent of dataset, can drop without losing too much data"""

df1 = df.dropna(how = 'any')
df1.shape

"""Dropping all NaN results in less than 5% of data lost... This is acceptable due to amount of data available, will drop all"""

del df1

df = df.dropna(how = 'any')

df['Premise'] = df['Premise'].str.upper()

df['Premise'].unique()

df

crs = {'init': 'epsg:4326'}

gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude), crs = crs)

gdf

"""Geometry point created, no need to keep longxlat or location 1"""

gdf.drop(['Longitude', 'Latitude', 'Location 1'], axis = 1, inplace = True)

gdf

fig, ax = plt.subplots(figsize = (10, 10))
sns.countplot(x = 'Description', palette = 'Blues_d', data = gdf, order = df['Description'].value_counts().index)
sns.despine()
plt.xticks(rotation = 45, ha = 'right')

fig, ax = plt.subplots(figsize = (10, 10))
sns.countplot(x = 'Weapon', data = gdf, order = df['Weapon'].value_counts().index)
sns.despine()
plt.xticks(rotation = 45, ha = 'right')

fig, ax = plt.subplots(figsize = (10, 10))
sns.countplot(x = 'District', data = gdf,  palette = 'Blues_d', order = df['District'].value_counts().index)
sns.despine()
plt.xticks(rotation = 45, ha = 'right')

fig, ax = plt.subplots(figsize = (10, 10))
sns.countplot(x = 'District', data = gdf, palette = 'RdBu_d', hue = 'Weapon', order = df['District'].value_counts().index)
sns.despine()
plt.xticks(rotation = 45, ha = 'right')

baltimore = gpd.read_file('https://data.baltimorecity.gov/api/views/deus-s85f/files/uvSrbSrNNI6kxdQMdA7Rdp9rx-tLl6m1xGI0baktz2Q?filename=Building.zip')

fig, ax = plt.subplots(figsize = (15,15))
baltimore.plot(ax = ax)

fig, ax = plt.subplots( figsize = (15,15))
baltimore.plot(ax = ax, color = 'grey', alpha = .4)
gdf[gdf['Description']==('ROBBERY - STREET')].plot(ax = ax, color = 'red', markersize = 1, alpha = .5 )
gdf[gdf['Description']==('SHOOTING')].plot(ax = ax, color = 'green', markersize = 1, alpha = .5)
gdf[gdf['Description']==('RAPE')].plot(ax = ax, color = 'blue', markersize = 1 )

crimecam = gpd.read_file('https://data.baltimorecity.gov/api/geospatial/jit3-cud7?method=export&format=Shapefile')

fig, ax = plt.subplots(figsize = (15,15))
crimecam.plot(ax = ax)

fig, ax = plt.subplots( figsize = (15,15))
crimecam.plot(ax = ax, color = 'blue')
gdf[gdf['Description']==('ROBBERY - STREET')].plot(ax = ax, color = 'red', markersize = 1)
gdf[gdf['Description']==('SHOOTING')].plot(ax = ax, color = 'green', markersize = 1)
gdf[gdf['Description']==('RAPE')].plot(ax = ax, color = 'purple', markersize = 1 )

street = gpd.read_file('https://data.baltimorecity.gov/api/geospatial/tau7-6emy?method=export&format=Shapefile')

fig, ax = plt.subplots( figsize = (15,15))
street.plot(ax = ax, color = 'grey', alpha = .4)
gdf[gdf['Description']==('ROBBERY - STREET')].plot(ax = ax, color = 'red', markersize = 1)
gdf[gdf['Description']==('SHOOTING')].plot(ax = ax, color = 'green', markersize = 1)
gdf[gdf['Description']==('RAPE')].plot(ax = ax, color = 'purple', markersize = 1 )

fig, ax = plt.subplots( figsize = (15,15), dpi = 300)
crimecam.plot(ax = ax, color = 'blue')
street.plot(ax = ax, color = 'black', alpha = .2)
gdf[gdf['Description']==('ROBBERY - STREET')].plot(ax = ax, color = 'red', markersize = 1)
gdf[gdf['Description']==('SHOOTING')].plot(ax = ax, color = 'green', markersize = 1)
gdf[gdf['Description']==('RAPE')].plot(ax = ax, color = 'purple', markersize = 1 )

permitdf = pd.read_csv('https://data.baltimorecity.gov/api/views/cdz5-3y2u/rows.csv?accessType=DOWNLOAD')

permitdf

fig, ax = plt.subplots(figsize = (10, 10))
sns.countplot(x = 'Description', data = gdf, hue = 'In_Out')
sns.despine()
plt.xticks(rotation = 45, ha = 'right')

